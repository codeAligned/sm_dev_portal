<?php
 
/**
 * @file
 * Install, update and uninstall functions for sm_dev_portal.
 */


/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function sm_dev_portal_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  // Copy logo and color css image to public folder.
  $path = 'public://color/sm_dev_portal_theme-c5db440b/';
  if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
    $image = file_get_contents(drupal_get_path("profile", "sm_dev_portal") . "/resources/color/sm_dev_portal_theme-c5db440b/logo.svg");
    file_save_data($image, $path.'logo.svg', FILE_EXISTS_REPLACE);
    $css = file_get_contents(drupal_get_path("profile", "sm_dev_portal") . "/resources/color/sm_dev_portal_theme-c5db440b/colors.css");
    file_save_data($css, $path.'colors.css', FILE_EXISTS_REPLACE);
  }
  // Copy banner background image to public folder.
  $image = file_get_contents(drupal_get_path("profile", "sm_dev_portal") . "/resources/stratus-bg.png");
  file_save_data($image, 'public://stratus-bg.png', FILE_EXISTS_REPLACE);

  // Copy logo image to public folder.
  $image = file_get_contents(drupal_get_path("profile", "sm_dev_portal") . "/resources/logo_1.png");
  file_save_data($image, 'public://logo_1.png', FILE_EXISTS_REPLACE);

  // Copy image for default content to public folder.
  $folder_names = array('default_images', 'home', 'api-specs', 'inline-images');
  foreach($folder_names as $folder_name){
    $path = 'public://'.$folder_name.'/';
    if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
      $original = drupal_get_path('profile', 'sm_dev_portal') . '/resources/'.$folder_name;
      $files = file_scan_directory($original,'/.*/');
      if(!empty($files)){
        foreach ($files as $file) {
          if(!empty($file->uri)){
            file_unmanaged_copy($file->uri, $path,FILE_EXISTS_REPLACE );
          }
        }
      }
    }
  }
  // Enable the default content module. This can't be specified as a dependency
  \Drupal::service('module_installer')->install(['sm_dev_portal_default_content'], TRUE);
  $config = \Drupal::configFactory()->getEditable('system.site');
  $config->set('page.front', '/node/12')->save();
  //Updating alias of node
  sm_dev_portal_update_entity_alias();
}

/**
* Implements copy directory function.
*/
function sm_dev_portal_update_entity_alias() {
  $entities = [];
  $entities['node'] = \Drupal::entityQuery('node')->execute();
  $result = [];

  foreach ($entities as $type => $entity_list) {
    foreach ($entity_list as $entity_id) {
      $result[] = [
        'entity_type' => $type,
        'id' => $entity_id,
      ];
    }
  }

  // Use the sandbox to store the information needed to track progression.
  if (!isset($sandbox['current']))
  {
    // The count of entities visited so far.
    $sandbox['current'] = 0;
    // Total entities that must be visited.
    $sandbox['max'] = count($result);
    // A place to store messages during the run.
  }

  // Process entities by groups of 20.
  // When a group is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 20;
  $result = array_slice($result, $sandbox['current'], $limit);

  foreach ($result as $row) {
    $entity_storage = \Drupal::entityTypeManager()->getStorage($row['entity_type']);
    $entity = $entity_storage->load($row['id']);

    // Update Entity URL alias.
    \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'update');

    // Update our progress information.
    $sandbox['current']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['current'] / $sandbox['max']);

  if ($sandbox['#finished'] >= 1) {
    return t('The batch URL Alias update is finished.');
  }
}

